import PropTypes from 'prop-types'
import { Link } from 'react-router-dom'
import { useState, useEffect } from 'react'

// Local imports
import { translateCarName } from '../utils'

const fuelTypeTranslation = {
	ÌúòÎ∞úÏú†: '–ë–µ–Ω–∑–∏–Ω',
	Í≤ΩÏú†: '–î–∏–∑–µ–ª—å',
	LPG: '–ì–∞–∑ (LPG)',
	'ÌúòÎ∞úÏú†/LPGÍ≤∏': '–ë–µ–Ω–∑–∏–Ω/–ì–∞–∑ (LPG)',
	'ÌúòÎ∞úÏú†/CNGÍ≤∏': '–ë–µ–Ω–∑–∏–Ω/CNG',
	'ÌúòÎ∞úÏú† ÌïòÏù¥Î∏åÎ¶¨Îìú': '–ì–∏–±—Ä–∏–¥ (–ë–µ–Ω–∑–∏–Ω)',
	'LPG ÌïòÏù¥Î∏åÎ¶¨Îìú': '–ì–∏–±—Ä–∏–¥ (–ì–∞–∑ LPG)',
	'Í≤ΩÏú† ÌïòÏù¥Î∏åÎ¶¨Îìú': '–ì–∏–±—Ä–∏–¥ (–î–∏–∑–µ–ª—å)',
	Ï†ÑÍ∏∞: '–≠–ª–µ–∫—Ç—Ä–æ',
	CNG: '–ì–∞–∑ (CNG)',
	ÏàòÏÜå: '–í–æ–¥–æ—Ä–æ–¥',
}

let conversionRatesCache = null

const CarListItem = ({ car }) => {
	// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç (usd -> krw –∏ usd -> rub)
	const [conversionRates, setConversionRates] = useState(conversionRatesCache)

	useEffect(() => {
		if (!conversionRatesCache) {
			fetch(
				'https://cdn.jsdelivr.net/npm/@fawazahmed0/currency-api@latest/v1/currencies/usd.json',
			)
				.then((response) => response.json())
				.then((data) => {
					const rates = {
						// –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å: 1 USD = ? KRW –∏ 1 USD = ? RUB
						krw: data.usd.krw,
						rub: data.usd.rub,
					}
					conversionRatesCache = rates
					setConversionRates(rates)
				})
				.catch((err) => {
					console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:', err)
				})
		}
	}, [])

	// –ï—Å–ª–∏ –∫—É—Ä—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1300 –∏ 18) –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å "–ó–∞–≥—Ä—É–∑–∫–∞..."
	const usdRate = conversionRates ? conversionRates.krw : 1300
	const rubRate = conversionRates ? conversionRates.rub : 18

	// –¶–µ–Ω–∞ –≤ –≤–æ–Ω–∞—Ö
	const priceWonNum = car.price.replace(/\D+/gm, '') * 10000
	const priceWonFormatted = priceWonNum.toLocaleString()

	// –¶–µ–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö = —Ü–µ–Ω–∞ –≤ –≤–æ–Ω–∞—Ö / –∫—É—Ä—Å KRW (1 USD = usdRate KRW)
	const priceUsdNum = priceWonNum / usdRate
	const priceUsdFormatted = priceUsdNum.toLocaleString(undefined, {
		minimumFractionDigits: 0,
		maximumFractionDigits: 0,
	})

	// –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö = —Ü–µ–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö * –∫—É—Ä—Å (1 USD = rubRate RUB)
	const priceRubNum = priceUsdNum * rubRate
	const priceRubFormatted = priceRubNum.toLocaleString(undefined, {
		minimumFractionDigits: 0,
		maximumFractionDigits: 0,
	})

	const formattedCarMileage = parseInt(
		car.mileage.replace(/\D+/gm, ''),
	).toLocaleString()

	const carYear = car.year.split('-')[0]
	const carMonth = car.year.split('-')[1]
	const formattedCarDate = `${carMonth}/${carYear}`
	const carId = car.link.split('/').pop() // –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ URL
	const formattedTransmission =
		car.transmission === 'Ïò§ÌÜ†' ? '–ê–≤—Ç–æ–º–∞—Ç' : '–ú–µ—Ö–∞–Ω–∏–∫–∞'

	const formattedCarName = translateCarName(car?.name) || car?.name

	return (
		<div className='relative bg-avtoVitaBlack rounded-2xl shadow-lg overflow-hidden hover:shadow-2xl duration-300 border border-gray-700/50'>
			{/* –ë–ª–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
			<Link
				to={`/car/${carId}`}
				target='_blank'
				rel='noopener noreferrer'
				className='block'
			>
				<div className='relative w-full h-60 overflow-hidden rounded-t-2xl'>
					<img
						src={car.image.replaceAll('"', '')}
						alt={car.name}
						className='w-full h-full object-cover'
					/>
					{/* –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –≤–Ω–∏–∑—É –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –≥–ª—É–±–∏–Ω—ã */}
					<div className='absolute bottom-0 left-0 w-full h-1/3 bg-gradient-to-t from-black/50 to-transparent'></div>
				</div>
			</Link>

			{/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
			<div className='p-4 rounded-b-2xl'>
				{/* –ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å */}
				<h2 className='text-xl font-semibold text-black truncate'>
					{formattedCarName}
				</h2>

				{/* –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
				<div className='flex flex-col text-sm text-black mt-2 space-y-1'>
					<span className='flex items-center gap-2'>
						üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {formattedCarDate}
					</span>
					<span className='flex items-center gap-2'>
						üöó –ü—Ä–æ–±–µ–≥: {formattedCarMileage} –∫–º
					</span>
					<span className='flex items-center gap-2'>
						‚õΩ {fuelTypeTranslation[car.fuelType] || car.fuelType}
					</span>
					<span>‚öôÔ∏è {formattedTransmission}</span>
				</div>

				{/* –¶–µ–Ω–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç–∞—Ö –∏ –∫–Ω–æ–ø–∫–∞ */}
				<div className='mt-4'>
					<div className='flex justify-left items-center'>
						<span className='text-lg font-bold text-black'>
							‚Ç©{priceWonFormatted}
						</span>
					</div>
					<div className='flex justify-left items-center'>
						<span className='text-lg font-bold text-black'>
							${priceUsdFormatted}
						</span>
					</div>
					<div className='flex justify-left items-center'>
						<span className='text-lg font-bold text-black'>
							{priceRubFormatted} ‚ÇΩ
						</span>
					</div>
					<div className='mt-4 flex justify-end'>
						<Link
							to={`/car/${carId}`}
							target='_blank'
							className='inline-block px-4 py-2 border border-yellow-500 text-yellow-500 text-sm font-semibold rounded transition duration-300 hover:bg-yellow-500 hover:text-black'
						>
							–ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Üí
						</Link>
					</div>
				</div>
			</div>

			{/* –ì–æ–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≤—ã–≤–µ–¥–µ–Ω –≤ —É–≥–ª—É) */}
			<div className='absolute top-2 right-2 bg-yellow-500 text-black text-xs font-bold px-2 py-1 rounded'>
				{car.year}
			</div>
		</div>
	)
}

CarListItem.propTypes = {
	car: PropTypes.shape({
		link: PropTypes.string.isRequired,
		image: PropTypes.string.isRequired,
		name: PropTypes.string.isRequired,
		year: PropTypes.string.isRequired,
		mileage: PropTypes.string.isRequired,
		fuelType: PropTypes.string.isRequired,
		transmission: PropTypes.string.isRequired,
		price: PropTypes.string.isRequired,
	}).isRequired,
}

export default CarListItem
